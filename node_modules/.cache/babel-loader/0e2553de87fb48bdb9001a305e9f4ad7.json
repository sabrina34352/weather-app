{"ast":null,"code":"var _jsxFileName = \"/home/sabrina/codes/weather-app/src/components/ForecastGraph.js\";\nimport React from \"react\";\nimport forecastCSS from \"../styles/forecast.module.css\"; // max degree - 25\n// min degree - 13\n// average degree = 25+13/2 = 19(no)\n// find the difference between either of degrees and the average degree(no)\n// the difference between max and min - 12degrees\n// 100/1.5~ = 83- the hegiht\n// how much is one degree (proportion)\n// 12degree == 83px\n// 1degree = 83px/12 = ~7px\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ForecastGraph(props) {\n  // const temperatureDay = [23, 23, 24, 24, 22];\n  const temperatureDay = [16, 17, 16, 14, 17];\n  let max = Math.max(...temperatureDay),\n      min = Math.min(...temperatureDay);\n  let difference = max - min;\n  let maxHeight = 60;\n  let degreeOfChange = maxHeight / difference; //of Y axis\n  // console.log(props.props.startingPoint);\n\n  console.log(\"degree of change\", degreeOfChange);\n  console.log(\"average\", (max + min) / 2);\n  const temperatureData = {\n    x1: 0,\n    y1: 0,\n    x2: -props.props.startingPoint,\n    y2: 50\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      className: forecastCSS.graph,\n      children: temperatureDay.map((each, key) => {\n        temperatureData.x1 = temperatureData.x2;\n        temperatureData.y1 = temperatureData.y2;\n        temperatureData.x2 += props.props.widthOfContainers;\n        console.log(temperatureDay[key - 1], \" and \", each); // let avg = (max + min) / 2;\n\n        if (temperatureDay[0] > each && temperatureDay[key - 1] !== each) {\n          temperatureData.y2 += degreeOfChange; // degreeOfChange * Math.abs(temperatureDay[key - 1] - each);\n        } else if (avg < each && temperatureDay[key - 1] !== each) {\n          temperatureData.y2 -= degreeOfChange; // degreeOfChange * Math.abs(temperatureDay[key - 1] - each);\n        } else {\n          temperatureData.y2 += 0;\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: temperatureData.x2,\n            cy: temperatureData.y2,\n            r: \"4px\",\n            stroke: \"white\",\n            strokeWidth: \"1\",\n            fill: \"black\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: temperatureData.x1,\n            y1: temperatureData.y1,\n            x2: temperatureData.x2,\n            y2: temperatureData.y2,\n            stroke: \"white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_c = ForecastGraph;\nexport default ForecastGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForecastGraph\");","map":{"version":3,"sources":["/home/sabrina/codes/weather-app/src/components/ForecastGraph.js"],"names":["React","forecastCSS","ForecastGraph","props","temperatureDay","max","Math","min","difference","maxHeight","degreeOfChange","console","log","temperatureData","x1","y1","x2","startingPoint","y2","graph","map","each","key","widthOfContainers","avg"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport forecastCSS from \"../styles/forecast.module.css\";\n\n// max degree - 25\n// min degree - 13\n// average degree = 25+13/2 = 19(no)\n// find the difference between either of degrees and the average degree(no)\n// the difference between max and min - 12degrees\n// 100/1.5~ = 83- the hegiht\n// how much is one degree (proportion)\n// 12degree == 83px\n// 1degree = 83px/12 = ~7px\nfunction ForecastGraph(props) {\n  // const temperatureDay = [23, 23, 24, 24, 22];\n  const temperatureDay = [16, 17, 16, 14, 17];\n\n  let max = Math.max(...temperatureDay),\n    min = Math.min(...temperatureDay);\n  let difference = max - min;\n  let maxHeight = 60;\n  let degreeOfChange = maxHeight / difference; //of Y axis\n  // console.log(props.props.startingPoint);\n  console.log(\"degree of change\", degreeOfChange);\n  console.log(\"average\", (max + min) / 2);\n  const temperatureData = {\n    x1: 0,\n    y1: 0,\n    x2: -props.props.startingPoint,\n    y2: 50,\n  };\n\n  return (\n    <>\n      <svg className={forecastCSS.graph}>\n        {temperatureDay.map((each, key) => {\n          temperatureData.x1 = temperatureData.x2;\n          temperatureData.y1 = temperatureData.y2;\n          temperatureData.x2 += props.props.widthOfContainers;\n          console.log(temperatureDay[key - 1], \" and \", each);\n\n          // let avg = (max + min) / 2;\n          if (temperatureDay[0] > each && temperatureDay[key - 1] !== each) {\n            temperatureData.y2 += degreeOfChange;\n            // degreeOfChange * Math.abs(temperatureDay[key - 1] - each);\n          } else if (avg < each && temperatureDay[key - 1] !== each) {\n            temperatureData.y2 -= degreeOfChange;\n            // degreeOfChange * Math.abs(temperatureDay[key - 1] - each);\n          } else {\n            temperatureData.y2 += 0;\n          }\n\n          return (\n            <g key={key}>\n              <circle\n                cx={temperatureData.x2}\n                cy={temperatureData.y2}\n                r=\"4px\"\n                stroke=\"white\"\n                strokeWidth=\"1\"\n                fill=\"black\"\n              />\n              <line\n                x1={temperatureData.x1}\n                y1={temperatureData.y1}\n                x2={temperatureData.x2}\n                y2={temperatureData.y2}\n                stroke=\"white\"\n              />\n            </g>\n          );\n        })}\n      </svg>\n    </>\n  );\n}\n\nexport default ForecastGraph;\n"]},"metadata":{},"sourceType":"module"}