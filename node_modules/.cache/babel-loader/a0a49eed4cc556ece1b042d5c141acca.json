{"ast":null,"code":"var _jsxFileName = \"/home/sabrina/codes/weather-app/src/components/ForecastGraph.js\";\nimport React from \"react\";\nimport forecastCSS from \"../styles/forecast.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst temperatureDay = [23, 23, 24, 24, 22];\nconst temperatureNight = [13, 13, 14, 14, 13]; // max degree - 25\n// min degree - 13\n// average degree = 25+13/2 = 19(no)\n// find the difference between either of degrees and the average degree(no)\n// the difference between max and min - 12degrees\n// 100/1.5~ = 83- the hegiht\n// how much is one degree (proportion)\n// 12degree == 83px\n// 1degree = 83px/12 = ~7px\n\nfunction ForecastGraph() {\n  let min = Math.min(...temperatureDay),\n      max = Math.max(...temperatureNight);\n  let difference = max - min;\n  let maxHeight = 60;\n  let degreeOfChange = maxHeight / difference;\n  console.log(degreeOfChange);\n  const temperatureData = [{\n    x1: 60,\n    y1: 50,\n    x2: 180,\n    y2: 70 + degreeOfChange\n  }, {\n    x1: 180,\n    y1: 70 + degreeOfChange,\n    x2: 150,\n    y2: 15\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      className: forecastCSS.graph,\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: temperatureData[0].x1,\n        cy: temperatureData[0].y1,\n        r: \"4px\",\n        stroke: \"white\",\n        strokeWidth: \"1\",\n        fill: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), temperatureData.map((each, key) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: each.x2,\n          cy: each.y2,\n          r: \"4px\",\n          stroke: \"white\",\n          strokeWidth: \"1\",\n          fill: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: each.x1,\n          y1: each.y1,\n          x2: each.x2,\n          y2: each.y2,\n          stroke: \"white\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_c = ForecastGraph;\nexport default ForecastGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForecastGraph\");","map":{"version":3,"sources":["/home/sabrina/codes/weather-app/src/components/ForecastGraph.js"],"names":["React","forecastCSS","temperatureDay","temperatureNight","ForecastGraph","min","Math","max","difference","maxHeight","degreeOfChange","console","log","temperatureData","x1","y1","x2","y2","graph","map","each","key"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;;;AAEA,MAAMC,cAAc,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAvB;AACA,MAAMC,gBAAgB,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,GAAyB;AACvB,MAAIC,GAAG,GAAGC,IAAI,CAACD,GAAL,CAAS,GAAGH,cAAZ,CAAV;AAAA,MACEK,GAAG,GAAGD,IAAI,CAACC,GAAL,CAAS,GAAGJ,gBAAZ,CADR;AAEA,MAAIK,UAAU,GAAGD,GAAG,GAAGF,GAAvB;AACA,MAAII,SAAS,GAAG,EAAhB;AACA,MAAIC,cAAc,GAAGD,SAAS,GAAGD,UAAjC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ;AACA,QAAMG,eAAe,GAAG,CACtB;AAAEC,IAAAA,EAAE,EAAE,EAAN;AAAUC,IAAAA,EAAE,EAAE,EAAd;AAAkBC,IAAAA,EAAE,EAAE,GAAtB;AAA2BC,IAAAA,EAAE,EAAE,KAAKP;AAApC,GADsB,EAEtB;AAAEI,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,EAAE,EAAE,KAAKL,cAApB;AAAoCM,IAAAA,EAAE,EAAE,GAAxC;AAA6CC,IAAAA,EAAE,EAAE;AAAjD,GAFsB,CAAxB;AAIA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAEhB,WAAW,CAACiB,KAA5B;AAAA,8BACE;AACE,QAAA,EAAE,EAAEL,eAAe,CAAC,CAAD,CAAf,CAAmBC,EADzB;AAEE,QAAA,EAAE,EAAED,eAAe,CAAC,CAAD,CAAf,CAAmBE,EAFzB;AAGE,QAAA,CAAC,EAAC,KAHJ;AAIE,QAAA,MAAM,EAAC,OAJT;AAKE,QAAA,WAAW,EAAC,GALd;AAME,QAAA,IAAI,EAAC;AANP;AAAA;AAAA;AAAA;AAAA,cADF,EASGF,eAAe,CAACM,GAAhB,CAAoB,CAACC,IAAD,EAAOC,GAAP,kBACnB;AAAA,gCACE;AACE,UAAA,EAAE,EAAED,IAAI,CAACJ,EADX;AAEE,UAAA,EAAE,EAAEI,IAAI,CAACH,EAFX;AAGE,UAAA,CAAC,EAAC,KAHJ;AAIE,UAAA,MAAM,EAAC,OAJT;AAKE,UAAA,WAAW,EAAC,GALd;AAME,UAAA,IAAI,EAAC;AANP;AAAA;AAAA;AAAA;AAAA,gBADF,eASE;AACE,UAAA,EAAE,EAAEG,IAAI,CAACN,EADX;AAEE,UAAA,EAAE,EAAEM,IAAI,CAACL,EAFX;AAGE,UAAA,EAAE,EAAEK,IAAI,CAACJ,EAHX;AAIE,UAAA,EAAE,EAAEI,IAAI,CAACH,EAJX;AAKE,UAAA,MAAM,EAAC;AALT;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,CATH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAiCD;;KA5CQb,a;AA8CT,eAAeA,aAAf","sourcesContent":["import React from \"react\";\nimport forecastCSS from \"../styles/forecast.module.css\";\n\nconst temperatureDay = [23, 23, 24, 24, 22];\nconst temperatureNight = [13, 13, 14, 14, 13];\n\n// max degree - 25\n// min degree - 13\n// average degree = 25+13/2 = 19(no)\n// find the difference between either of degrees and the average degree(no)\n// the difference between max and min - 12degrees\n// 100/1.5~ = 83- the hegiht\n// how much is one degree (proportion)\n// 12degree == 83px\n// 1degree = 83px/12 = ~7px\nfunction ForecastGraph() {\n  let min = Math.min(...temperatureDay),\n    max = Math.max(...temperatureNight);\n  let difference = max - min;\n  let maxHeight = 60;\n  let degreeOfChange = maxHeight / difference;\n  console.log(degreeOfChange);\n  const temperatureData = [\n    { x1: 60, y1: 50, x2: 180, y2: 70 + degreeOfChange },\n    { x1: 180, y1: 70 + degreeOfChange, x2: 150, y2: 15 },\n  ];\n  return (\n    <>\n      <svg className={forecastCSS.graph}>\n        <circle\n          cx={temperatureData[0].x1}\n          cy={temperatureData[0].y1}\n          r=\"4px\"\n          stroke=\"white\"\n          strokeWidth=\"1\"\n          fill=\"black\"\n        />\n        {temperatureData.map((each, key) => (\n          <g>\n            <circle\n              cx={each.x2}\n              cy={each.y2}\n              r=\"4px\"\n              stroke=\"white\"\n              strokeWidth=\"1\"\n              fill=\"black\"\n            />\n            <line\n              x1={each.x1}\n              y1={each.y1}\n              x2={each.x2}\n              y2={each.y2}\n              stroke=\"white\"\n            />\n          </g>\n        ))}\n      </svg>\n    </>\n  );\n}\n\nexport default ForecastGraph;\n"]},"metadata":{},"sourceType":"module"}