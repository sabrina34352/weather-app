{"ast":null,"code":"var _jsxFileName = \"/home/sabrina/codes/weather-app/src/components/Forecast/index.js\",\n    _s = $RefreshSig$();\n\nimport forecastCSS from \"./forecast.module.css\";\nimport forecastGraphCSS from \"../Graph/forecastGraph.module.css\";\nimport ForecastGraph from \"../Graph/ForecastGraph\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { Days } from \"../../assets/days\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Forecast() {\n  _s();\n\n  console.log(Days);\n  const divRef = useRef(null);\n  const childRef = useRef(null);\n  const [dataExists, setDataExists] = useState({});\n  const temperatureNight = [13, 14, 14, 13, 13, 14];\n  const temperatureDay = [23, 23, 24, 24, 22, 24];\n  useEffect(() => {\n    let widthMiddle = divRef.current.offsetWidth;\n    let WidthOfChild = childRef.current.offsetWidth;\n    let heightOfChild = childRef.current.offsetHeight; //width of the parent container divided by the number of elements and divided by 2 to find the middle\n    // width of child container to be able to draw a line to  exact pixels\n\n    setDataExists({\n      startingPoint: widthMiddle / 10,\n      widthOfContainers: WidthOfChild,\n      heightOfContainers: heightOfChild\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: forecastCSS.mainContainer,\n    ref: divRef,\n    children: [Object.keys(dataExists).length !== 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ForecastGraph, {\n        data: dataExists,\n        temperature: temperatureDay,\n        style: forecastGraphCSS.dayTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ForecastGraph, {\n        data: dataExists,\n        temperature: temperatureNight,\n        style: forecastGraphCSS.nightTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), Days.map(bud => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: forecastCSS.eachDay,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: forecastCSS.bigFont,\n        children: bud.day\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: forecastCSS.smallFont,\n        children: bud.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: bud.weather,\n        className: forecastCSS.images,\n        alt: \"weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: forecastCSS.random,\n        ref: childRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: forecastCSS.random\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: bud.weatherNight,\n        className: forecastCSS.images,\n        alt: \"weatherNight\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: forecastCSS.bigFont,\n        children: bud.wind\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, bud.day, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Forecast, \"oW/W9LMZFnAEoZ0i84R8glbVl+w=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/home/sabrina/codes/weather-app/src/components/Forecast/index.js"],"names":["forecastCSS","forecastGraphCSS","ForecastGraph","React","useRef","useEffect","useState","Days","Forecast","console","log","divRef","childRef","dataExists","setDataExists","temperatureNight","temperatureDay","widthMiddle","current","offsetWidth","WidthOfChild","heightOfChild","offsetHeight","startingPoint","widthOfContainers","heightOfContainers","mainContainer","Object","keys","length","dayTime","nightTime","map","bud","eachDay","bigFont","day","smallFont","date","weather","images","random","weatherNight","wind"],"mappings":"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","sourcesContent":["import forecastCSS from \"./forecast.module.css\";\nimport forecastGraphCSS from \"../Graph/forecastGraph.module.css\";\nimport ForecastGraph from \"../Graph/ForecastGraph\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { Days } from \"../../assets/days\";\n\nfunction Forecast() {\n  console.log(Days);\n\n  const divRef = useRef(null);\n  const childRef = useRef(null);\n  const [dataExists, setDataExists] = useState({});\n\n  const temperatureNight = [13, 14, 14, 13, 13, 14];\n  const temperatureDay = [23, 23, 24, 24, 22, 24];\n\n  useEffect(() => {\n    let widthMiddle = divRef.current.offsetWidth;\n    let WidthOfChild = childRef.current.offsetWidth;\n    let heightOfChild = childRef.current.offsetHeight;\n    //width of the parent container divided by the number of elements and divided by 2 to find the middle\n    // width of child container to be able to draw a line to  exact pixels\n    setDataExists({\n      startingPoint: widthMiddle / 10,\n      widthOfContainers: WidthOfChild,\n      heightOfContainers: heightOfChild,\n    });\n  }, []);\n  return (\n    <div className={forecastCSS.mainContainer} ref={divRef}>\n      {Object.keys(dataExists).length !== 0 && (\n        <>\n          {/* for dayTime */}\n          <ForecastGraph\n            data={dataExists}\n            temperature={temperatureDay}\n            style={forecastGraphCSS.dayTime}\n          />\n          {/* for nightTime */}\n          <ForecastGraph\n            data={dataExists}\n            temperature={temperatureNight}\n            style={forecastGraphCSS.nightTime}\n          />\n        </>\n      )}\n\n      {Days.map((bud) => (\n        <div className={forecastCSS.eachDay} key={bud.day}>\n          <p className={forecastCSS.bigFont}>{bud.day}</p>\n          <p className={forecastCSS.smallFont}>{bud.date}</p>\n          <img src={bud.weather} className={forecastCSS.images} alt=\"weather\" />\n          <div className={forecastCSS.random} ref={childRef}></div>\n          <div className={forecastCSS.random}></div>\n          <img\n            src={bud.weatherNight}\n            className={forecastCSS.images}\n            alt=\"weatherNight\"\n          />\n          <p className={forecastCSS.bigFont}>{bud.wind}</p>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}