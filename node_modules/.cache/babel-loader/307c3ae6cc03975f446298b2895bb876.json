{"ast":null,"code":"var _jsxFileName = \"/home/sabrina/codes/weather-app/src/components/Forecast/index.jsx\",\n    _s = $RefreshSig$();\n\nimport forecastCSS from \"./forecast.module.css\";\nimport forecastGraphCSS from \"../Graph/forecastGraph.module.css\";\nimport ForecastGraph from \"../Graph/ForecastGraph\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Forecast(_ref) {\n  _s();\n\n  let {\n    data,\n    temperatureDay,\n    temperatureNight\n  } = _ref;\n  const divRef = useRef(null);\n  const childRef = useRef(null);\n  const [containerData, setcontainerData] = useState({});\n  useEffect(() => {\n    let widthMiddle = divRef.current.offsetWidth;\n    let WidthOfChild = childRef.current.offsetWidth;\n    let heightOfChild = childRef.current.offsetHeight; //width of the parent container divided by the number of elements and divided by 2 to find the middle\n    // width of child container to be able to draw a line to  exact pixels\n\n    setcontainerData({\n      startingPoint: widthMiddle / (data.length * 2),\n      widthOfContainers: WidthOfChild,\n      heightOfContainers: heightOfChild\n    });\n  }, [containerData, data.length]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: forecastCSS.mainContainer,\n    ref: divRef,\n    children: [Object.keys(containerData).length !== 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ForecastGraph, {\n        data: containerData,\n        temperature: temperatureDay,\n        style: forecastGraphCSS.dayTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ForecastGraph, {\n        data: containerData,\n        temperature: temperatureNight,\n        style: forecastGraphCSS.nightTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), data.map(bud => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: forecastCSS.eachDay,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: forecastCSS.bigFont,\n        children: bud.day\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: forecastCSS.smallFont,\n        children: bud.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: bud.weather,\n        className: forecastCSS.images,\n        alt: \"weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: forecastCSS.graphSpace,\n        ref: childRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: forecastCSS.graphSpace\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: bud.weatherNight,\n        className: forecastCSS.images,\n        alt: \"weatherNight\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: forecastCSS.bigFont,\n        children: bud.wind\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, bud.day, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Forecast, \"MoVGVIe+2N6PetI/UL7oOwKKyoM=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/home/sabrina/codes/weather-app/src/components/Forecast/index.jsx"],"names":["forecastCSS","forecastGraphCSS","ForecastGraph","React","useRef","useEffect","useState","Forecast","data","temperatureDay","temperatureNight","divRef","childRef","containerData","setcontainerData","widthMiddle","current","offsetWidth","WidthOfChild","heightOfChild","offsetHeight","startingPoint","length","widthOfContainers","heightOfContainers","mainContainer","Object","keys","dayTime","nightTime","map","bud","eachDay","bigFont","day","smallFont","date","weather","images","graphSpace","weatherNight","wind"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,uBAAxB;AACA,OAAOC,gBAAP,MAA6B,mCAA7B;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;;;AAEA,SAASC,QAAT,OAA8D;AAAA;;AAAA,MAA5C;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,cAAR;AAAwBC,IAAAA;AAAxB,GAA4C;AAC5D,QAAMC,MAAM,GAAGP,MAAM,CAAC,IAAD,CAArB;AACA,QAAMQ,QAAQ,GAAGR,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,EAAD,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,WAAW,GAAGJ,MAAM,CAACK,OAAP,CAAeC,WAAjC;AACA,QAAIC,YAAY,GAAGN,QAAQ,CAACI,OAAT,CAAiBC,WAApC;AACA,QAAIE,aAAa,GAAGP,QAAQ,CAACI,OAAT,CAAiBI,YAArC,CAHc,CAId;AACA;;AACAN,IAAAA,gBAAgB,CAAC;AACfO,MAAAA,aAAa,EAAEN,WAAW,IAAIP,IAAI,CAACc,MAAL,GAAc,CAAlB,CADX;AAEfC,MAAAA,iBAAiB,EAAEL,YAFJ;AAGfM,MAAAA,kBAAkB,EAAEL;AAHL,KAAD,CAAhB;AAKD,GAXQ,EAWN,CAACN,aAAD,EAAgBL,IAAI,CAACc,MAArB,CAXM,CAAT;AAYA,sBACE;AAAK,IAAA,SAAS,EAAEtB,WAAW,CAACyB,aAA5B;AAA2C,IAAA,GAAG,EAAEd,MAAhD;AAAA,eACGe,MAAM,CAACC,IAAP,CAAYd,aAAZ,EAA2BS,MAA3B,KAAsC,CAAtC,iBACC;AAAA,8BAEE,QAAC,aAAD;AACE,QAAA,IAAI,EAAET,aADR;AAEE,QAAA,WAAW,EAAEJ,cAFf;AAGE,QAAA,KAAK,EAAER,gBAAgB,CAAC2B;AAH1B;AAAA;AAAA;AAAA;AAAA,cAFF,eAQE,QAAC,aAAD;AACE,QAAA,IAAI,EAAEf,aADR;AAEE,QAAA,WAAW,EAAEH,gBAFf;AAGE,QAAA,KAAK,EAAET,gBAAgB,CAAC4B;AAH1B;AAAA;AAAA;AAAA;AAAA,cARF;AAAA,oBAFJ,EAkBGrB,IAAI,CAACsB,GAAL,CAAUC,GAAD,iBACR;AAAK,MAAA,SAAS,EAAE/B,WAAW,CAACgC,OAA5B;AAAA,8BACE;AAAG,QAAA,SAAS,EAAEhC,WAAW,CAACiC,OAA1B;AAAA,kBAAoCF,GAAG,CAACG;AAAxC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAG,QAAA,SAAS,EAAElC,WAAW,CAACmC,SAA1B;AAAA,kBAAsCJ,GAAG,CAACK;AAA1C;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,GAAG,EAAEL,GAAG,CAACM,OAAd;AAAuB,QAAA,SAAS,EAAErC,WAAW,CAACsC,MAA9C;AAAsD,QAAA,GAAG,EAAC;AAA1D;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAK,QAAA,SAAS,EAAEtC,WAAW,CAACuC,UAA5B;AAAwC,QAAA,GAAG,EAAE3B;AAA7C;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAK,QAAA,SAAS,EAAEZ,WAAW,CAACuC;AAA5B;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AACE,QAAA,GAAG,EAAER,GAAG,CAACS,YADX;AAEE,QAAA,SAAS,EAAExC,WAAW,CAACsC,MAFzB;AAGE,QAAA,GAAG,EAAC;AAHN;AAAA;AAAA;AAAA;AAAA,cANF,eAWE;AAAG,QAAA,SAAS,EAAEtC,WAAW,CAACiC,OAA1B;AAAA,kBAAoCF,GAAG,CAACU;AAAxC;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA,OAA0CV,GAAG,CAACG,GAA9C;AAAA;AAAA;AAAA;AAAA,YADD,CAlBH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD;;GArDQ3B,Q;;KAAAA,Q;AAuDT,eAAeA,QAAf","sourcesContent":["import forecastCSS from \"./forecast.module.css\";\nimport forecastGraphCSS from \"../Graph/forecastGraph.module.css\";\nimport ForecastGraph from \"../Graph/ForecastGraph\";\nimport React, { useRef, useEffect, useState } from \"react\";\n\nfunction Forecast({ data, temperatureDay, temperatureNight }) {\n  const divRef = useRef(null);\n  const childRef = useRef(null);\n  const [containerData, setcontainerData] = useState({});\n\n  useEffect(() => {\n    let widthMiddle = divRef.current.offsetWidth;\n    let WidthOfChild = childRef.current.offsetWidth;\n    let heightOfChild = childRef.current.offsetHeight;\n    //width of the parent container divided by the number of elements and divided by 2 to find the middle\n    // width of child container to be able to draw a line to  exact pixels\n    setcontainerData({\n      startingPoint: widthMiddle / (data.length * 2),\n      widthOfContainers: WidthOfChild,\n      heightOfContainers: heightOfChild,\n    });\n  }, [containerData, data.length]);\n  return (\n    <div className={forecastCSS.mainContainer} ref={divRef}>\n      {Object.keys(containerData).length !== 0 && (\n        <>\n          {/* for dayTime */}\n          <ForecastGraph\n            data={containerData}\n            temperature={temperatureDay}\n            style={forecastGraphCSS.dayTime}\n          />\n          {/* for nightTime */}\n          <ForecastGraph\n            data={containerData}\n            temperature={temperatureNight}\n            style={forecastGraphCSS.nightTime}\n          />\n        </>\n      )}\n\n      {data.map((bud) => (\n        <div className={forecastCSS.eachDay} key={bud.day}>\n          <p className={forecastCSS.bigFont}>{bud.day}</p>\n          <p className={forecastCSS.smallFont}>{bud.date}</p>\n          <img src={bud.weather} className={forecastCSS.images} alt=\"weather\" />\n          <div className={forecastCSS.graphSpace} ref={childRef}></div>\n          <div className={forecastCSS.graphSpace}></div>\n          <img\n            src={bud.weatherNight}\n            className={forecastCSS.images}\n            alt=\"weatherNight\"\n          />\n          <p className={forecastCSS.bigFont}>{bud.wind}</p>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}