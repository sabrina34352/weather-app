{"ast":null,"code":"var _jsxFileName = \"/home/sabrina/codes/weather-app/src/components/ForecastGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport forecastCSS from \"../styles/forecast.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst temperatureData = [{\n  x1: \"10\",\n  y1: \"10\",\n  x2: \"70\",\n  y2: \"70\"\n}, {\n  x1: \"70\",\n  y1: \"70\",\n  x2: \"200\",\n  y2: \"15\"\n}];\n\nfunction ForecastGraph() {\n  _s();\n\n  const graphRef = useRef(null);\n  console.log(graphRef);\n\n  if (graphRef) {\n    console.log(graphRef.current.clientHeight);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      className: forecastCSS.graph,\n      ref: graphRef,\n      children: temperatureData.map((each, key) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: each.x1,\n        y1: each.y1,\n        x2: each.x2,\n        y2: each.y2,\n        stroke: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ForecastGraph, \"cOuBbu9QEojP0u3BzmmzD9z7oyk=\");\n\n_c = ForecastGraph;\nexport default ForecastGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForecastGraph\");","map":{"version":3,"sources":["/home/sabrina/codes/weather-app/src/components/ForecastGraph.js"],"names":["React","useRef","forecastCSS","temperatureData","x1","y1","x2","y2","ForecastGraph","graphRef","console","log","current","clientHeight","graph","map","each","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,QAA4B,OAA5B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;;;AAEA,MAAMC,eAAe,GAAG,CACtB;AAAEC,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,EAAE,EAAE,IAAhB;AAAsBC,EAAAA,EAAE,EAAE,IAA1B;AAAgCC,EAAAA,EAAE,EAAE;AAApC,CADsB,EAEtB;AAAEH,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,EAAE,EAAE,IAAhB;AAAsBC,EAAAA,EAAE,EAAE,KAA1B;AAAiCC,EAAAA,EAAE,EAAE;AAArC,CAFsB,CAAxB;;AAKA,SAASC,aAAT,GAAyB;AAAA;;AACvB,QAAMC,QAAQ,GAAGR,MAAM,CAAC,IAAD,CAAvB;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,MAAGA,QAAH,EAAY;AAEVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,OAAT,CAAiBC,YAA7B;AACD;;AACD,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAEX,WAAW,CAACY,KAA5B;AAAmC,MAAA,GAAG,EAAEL,QAAxC;AAAA,gBACGN,eAAe,CAACY,GAAhB,CAAoB,CAACC,IAAD,EAAOC,GAAP,kBACnB;AACE,QAAA,EAAE,EAAED,IAAI,CAACZ,EADX;AAEE,QAAA,EAAE,EAAEY,IAAI,CAACX,EAFX;AAGE,QAAA,EAAE,EAAEW,IAAI,CAACV,EAHX;AAIE,QAAA,EAAE,EAAEU,IAAI,CAACT,EAJX;AAKE,QAAA,MAAM,EAAC;AALT;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAeD;;GAtBQC,a;;KAAAA,a;AAwBT,eAAeA,aAAf","sourcesContent":["import React, {useRef} from \"react\";\nimport forecastCSS from \"../styles/forecast.module.css\";\n\nconst temperatureData = [\n  { x1: \"10\", y1: \"10\", x2: \"70\", y2: \"70\" },\n  { x1: \"70\", y1: \"70\", x2: \"200\", y2: \"15\" },\n  \n];\nfunction ForecastGraph() {\n  const graphRef = useRef(null);\n  console.log(graphRef);\n  if(graphRef){\n\n    console.log(graphRef.current.clientHeight)\n  }\n  return (\n    <>\n      <svg className={forecastCSS.graph} ref={graphRef}>\n        {temperatureData.map((each, key) => (\n          <line\n            x1={each.x1}\n            y1={each.y1}\n            x2={each.x2}\n            y2={each.y2}\n            stroke=\"white\"\n          />\n        ))}\n      </svg>\n    </>\n  );\n}\n\nexport default ForecastGraph;\n"]},"metadata":{},"sourceType":"module"}