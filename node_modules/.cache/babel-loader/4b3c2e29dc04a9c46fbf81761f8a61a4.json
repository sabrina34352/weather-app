{"ast":null,"code":"var _jsxFileName = \"/home/sabrina/codes/weather-app/src/components/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport forecastCSS from \"../styles/forecast.module.css\";\nimport cloudwithrain from \"../assets/cloudwithrain.svg\";\nimport cloudwithrainandstorm from \"../assets/cloudwithstorm.svg\";\nimport moon from \"../assets/moonReal.svg\";\nimport moonandcloud from \"../assets/moonAndClouds.svg\";\nimport ForecastGraph from \"../components/ForecastGraph\";\nimport ForecastGraphNight from \"../components/ForecastGraphNight\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst days = [{\n  day: \"Вчера\",\n  date: \"06.06\",\n  weather: cloudwithrain,\n  weatherNight: moonandcloud,\n  wind: \"3.1 m/c\"\n}, {\n  day: \"Сегодня\",\n  date: \"07.06\",\n  weather: cloudwithrain,\n  weatherNight: moon,\n  wind: \"2.9 m/c\"\n}, {\n  day: \"Завтра\",\n  date: \"08.06\",\n  weather: cloudwithrainandstorm,\n  weatherNight: moonandcloud,\n  wind: \"3.6 m/c\"\n}, {\n  day: \"Ср\",\n  date: \"09.06\",\n  weather: cloudwithrain,\n  weatherNight: moon,\n  wind: \"3.1 m/c\"\n}, {\n  day: \"Чт\",\n  date: \"10.06\",\n  weather: cloudwithrain,\n  weatherNight: moon,\n  wind: \"3.6 m/c\"\n}];\n\nfunction Forecast() {\n  _s();\n\n  const divRef = useRef(null);\n  const [dataExists, setDataExists] = useState({});\n  useEffect(() => {\n    let widthMiddle = divRef.current.offsetWidth;\n    let heightMiddle = divRef.current.offsetHeight; //width of the parent container divided by the number of elements and divided by 2 to find the middle\n\n    setDataExists({\n      startingPoint: widthMiddle / 10\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: forecastCSS.mainContainer,\n      ref: divRef,\n      children: [dataExists.length !== 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ForecastGraph, {\n          props: dataExists\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ForecastGraphNight, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), days.map(bud => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: forecastCSS.eachDay,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: forecastCSS.bigFont,\n          children: bud.day\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: forecastCSS.smallFont,\n          children: bud.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: bud.weather,\n          className: forecastCSS.images,\n          alt: \"weather\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: forecastCSS.random\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: forecastCSS.random\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: bud.weatherNight,\n          className: forecastCSS.images,\n          alt: \"weatherNight\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: forecastCSS.bigFont,\n          children: bud.wind\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, bud.day, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Forecast, \"WiC+X/tcxStR/jjXRCDmZfMA1+E=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/home/sabrina/codes/weather-app/src/components/Forecast.js"],"names":["forecastCSS","cloudwithrain","cloudwithrainandstorm","moon","moonandcloud","ForecastGraph","ForecastGraphNight","React","useRef","useEffect","useState","days","day","date","weather","weatherNight","wind","Forecast","divRef","dataExists","setDataExists","widthMiddle","current","offsetWidth","heightMiddle","offsetHeight","startingPoint","mainContainer","length","map","bud","eachDay","bigFont","smallFont","images","random"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,+BAAxB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,qBAAP,MAAkC,8BAAlC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,kBAAP,MAA+B,kCAA/B;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;;AAEA,MAAMC,IAAI,GAAG,CACX;AACEC,EAAAA,GAAG,EAAE,OADP;AAEEC,EAAAA,IAAI,EAAE,OAFR;AAGEC,EAAAA,OAAO,EAAEb,aAHX;AAIEc,EAAAA,YAAY,EAAEX,YAJhB;AAKEY,EAAAA,IAAI,EAAE;AALR,CADW,EAQX;AACEJ,EAAAA,GAAG,EAAE,SADP;AAEEC,EAAAA,IAAI,EAAE,OAFR;AAGEC,EAAAA,OAAO,EAAEb,aAHX;AAIEc,EAAAA,YAAY,EAAEZ,IAJhB;AAKEa,EAAAA,IAAI,EAAE;AALR,CARW,EAeX;AACEJ,EAAAA,GAAG,EAAE,QADP;AAEEC,EAAAA,IAAI,EAAE,OAFR;AAGEC,EAAAA,OAAO,EAAEZ,qBAHX;AAIEa,EAAAA,YAAY,EAAEX,YAJhB;AAKEY,EAAAA,IAAI,EAAE;AALR,CAfW,EAsBX;AACEJ,EAAAA,GAAG,EAAE,IADP;AAEEC,EAAAA,IAAI,EAAE,OAFR;AAGEC,EAAAA,OAAO,EAAEb,aAHX;AAIEc,EAAAA,YAAY,EAAEZ,IAJhB;AAKEa,EAAAA,IAAI,EAAE;AALR,CAtBW,EA6BX;AACEJ,EAAAA,GAAG,EAAE,IADP;AAEEC,EAAAA,IAAI,EAAE,OAFR;AAGEC,EAAAA,OAAO,EAAEb,aAHX;AAIEc,EAAAA,YAAY,EAAEZ,IAJhB;AAKEa,EAAAA,IAAI,EAAE;AALR,CA7BW,CAAb;;AAsCA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAMC,MAAM,GAAGV,MAAM,CAAC,IAAD,CAArB;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,WAAW,GAAGH,MAAM,CAACI,OAAP,CAAeC,WAAjC;AACA,QAAIC,YAAY,GAAGN,MAAM,CAACI,OAAP,CAAeG,YAAlC,CAFc,CAGd;;AACAL,IAAAA,aAAa,CAAC;AAAEM,MAAAA,aAAa,EAAEL,WAAW,GAAG;AAA/B,KAAD,CAAb;AACD,GALQ,EAKN,EALM,CAAT;AAMA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAErB,WAAW,CAAC2B,aAA5B;AAA2C,MAAA,GAAG,EAAET,MAAhD;AAAA,iBACGC,UAAU,CAACS,MAAX,KAAsB,CAAtB,iBACC;AAAA,gCACE,QAAC,aAAD;AAAe,UAAA,KAAK,EAAET;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,sBAFJ,EAQGR,IAAI,CAACkB,GAAL,CAAUC,GAAD,iBACR;AAAK,QAAA,SAAS,EAAE9B,WAAW,CAAC+B,OAA5B;AAAA,gCACE;AAAG,UAAA,SAAS,EAAE/B,WAAW,CAACgC,OAA1B;AAAA,oBAAoCF,GAAG,CAAClB;AAAxC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAG,UAAA,SAAS,EAAEZ,WAAW,CAACiC,SAA1B;AAAA,oBAAsCH,GAAG,CAACjB;AAA1C;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AACE,UAAA,GAAG,EAAEiB,GAAG,CAAChB,OADX;AAEE,UAAA,SAAS,EAAEd,WAAW,CAACkC,MAFzB;AAGE,UAAA,GAAG,EAAC;AAHN;AAAA;AAAA;AAAA;AAAA,gBAHF,eAQE;AAAK,UAAA,SAAS,EAAElC,WAAW,CAACmC;AAA5B;AAAA;AAAA;AAAA;AAAA,gBARF,eASE;AAAK,UAAA,SAAS,EAAEnC,WAAW,CAACmC;AAA5B;AAAA;AAAA;AAAA;AAAA,gBATF,eAUE;AACE,UAAA,GAAG,EAAEL,GAAG,CAACf,YADX;AAEE,UAAA,SAAS,EAAEf,WAAW,CAACkC,MAFzB;AAGE,UAAA,GAAG,EAAC;AAHN;AAAA;AAAA;AAAA;AAAA,gBAVF,eAeE;AAAG,UAAA,SAAS,EAAElC,WAAW,CAACgC,OAA1B;AAAA,oBAAoCF,GAAG,CAACd;AAAxC;AAAA;AAAA;AAAA;AAAA,gBAfF;AAAA,SAA0Cc,GAAG,CAAClB,GAA9C;AAAA;AAAA;AAAA;AAAA,cADD,CARH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAgCD;;GA1CQK,Q;;KAAAA,Q;AA4CT,eAAeA,QAAf","sourcesContent":["import forecastCSS from \"../styles/forecast.module.css\";\nimport cloudwithrain from \"../assets/cloudwithrain.svg\";\nimport cloudwithrainandstorm from \"../assets/cloudwithstorm.svg\";\nimport moon from \"../assets/moonReal.svg\";\nimport moonandcloud from \"../assets/moonAndClouds.svg\";\nimport ForecastGraph from \"../components/ForecastGraph\";\nimport ForecastGraphNight from \"../components/ForecastGraphNight\";\nimport React, { useRef, useEffect, useState } from \"react\";\n\nconst days = [\n  {\n    day: \"Вчера\",\n    date: \"06.06\",\n    weather: cloudwithrain,\n    weatherNight: moonandcloud,\n    wind: \"3.1 m/c\",\n  },\n  {\n    day: \"Сегодня\",\n    date: \"07.06\",\n    weather: cloudwithrain,\n    weatherNight: moon,\n    wind: \"2.9 m/c\",\n  },\n  {\n    day: \"Завтра\",\n    date: \"08.06\",\n    weather: cloudwithrainandstorm,\n    weatherNight: moonandcloud,\n    wind: \"3.6 m/c\",\n  },\n  {\n    day: \"Ср\",\n    date: \"09.06\",\n    weather: cloudwithrain,\n    weatherNight: moon,\n    wind: \"3.1 m/c\",\n  },\n  {\n    day: \"Чт\",\n    date: \"10.06\",\n    weather: cloudwithrain,\n    weatherNight: moon,\n    wind: \"3.6 m/c\",\n  },\n];\n\nfunction Forecast() {\n  const divRef = useRef(null);\n  const [dataExists, setDataExists] = useState({});\n\n  useEffect(() => {\n    let widthMiddle = divRef.current.offsetWidth;\n    let heightMiddle = divRef.current.offsetHeight;\n    //width of the parent container divided by the number of elements and divided by 2 to find the middle\n    setDataExists({ startingPoint: widthMiddle / 10 });\n  }, []);\n  return (\n    <>\n      <div className={forecastCSS.mainContainer} ref={divRef}>\n        {dataExists.length !== 0 && (\n          <>\n            <ForecastGraph props={dataExists} />\n            <ForecastGraphNight />\n          </>\n        )}\n\n        {days.map((bud) => (\n          <div className={forecastCSS.eachDay} key={bud.day}>\n            <p className={forecastCSS.bigFont}>{bud.day}</p>\n            <p className={forecastCSS.smallFont}>{bud.date}</p>\n            <img\n              src={bud.weather}\n              className={forecastCSS.images}\n              alt=\"weather\"\n            />\n            <div className={forecastCSS.random}></div>\n            <div className={forecastCSS.random}></div>\n            <img\n              src={bud.weatherNight}\n              className={forecastCSS.images}\n              alt=\"weatherNight\"\n            />\n            <p className={forecastCSS.bigFont}>{bud.wind}</p>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}