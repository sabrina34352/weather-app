{"ast":null,"code":"var _jsxFileName = \"/home/sabrina/codes/weather-app/src/components/ForecastGraph.js\";\nimport React from \"react\";\nimport forecastCSS from \"../styles/forecast.module.css\"; // max degree - 25\n// min degree - 13\n// average degree = 25+13/2 = 19(no)\n// find the difference between either of degrees and the average degree(no)\n// the difference between max and min - 12degrees\n// 100/1.5~ = 83- the hegiht\n// how much is one degree (proportion)\n// 12degree == 83px\n// 1degree = 83px/12 = ~7px\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ForecastGraph(props) {\n  const temperatureDay = [23, 23, 24, 24, 22];\n  let min = Math.min(...temperatureDay),\n      max = Math.max(...temperatureNight);\n  let difference = max - min;\n  let maxHeight = 70;\n  let degreeOfChange = Math.abs(maxHeight / difference);\n  console.log(props.props.startingPoint);\n  const temperatureData = {\n    x1: props.props.startingPoint,\n    y1: 50\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      className: forecastCSS.graph,\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: temperatureData.x1,\n        cy: temperatureData.y1,\n        r: \"4px\",\n        stroke: \"white\",\n        strokeWidth: \"1\",\n        fill: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), temperatureDay.map((each, key) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: each.x2,\n          cy: each.y2,\n          r: \"4px\",\n          stroke: \"white\",\n          strokeWidth: \"1\",\n          fill: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: each.x1,\n          y1: each.y1,\n          x2: each.x2,\n          y2: each.y2,\n          stroke: \"white\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_c = ForecastGraph;\nexport default ForecastGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForecastGraph\");","map":{"version":3,"sources":["/home/sabrina/codes/weather-app/src/components/ForecastGraph.js"],"names":["React","forecastCSS","ForecastGraph","props","temperatureDay","min","Math","max","temperatureNight","difference","maxHeight","degreeOfChange","abs","console","log","startingPoint","temperatureData","x1","y1","graph","map","each","key","x2","y2"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,+BAAxB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAE9B,QAAMC,cAAc,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAvB;AACE,MAAIC,GAAG,GAAGC,IAAI,CAACD,GAAL,CAAS,GAAGD,cAAZ,CAAV;AAAA,MACEG,GAAG,GAAGD,IAAI,CAACC,GAAL,CAAS,GAAGC,gBAAZ,CADR;AAEA,MAAIC,UAAU,GAAGF,GAAG,GAAGF,GAAvB;AACA,MAAIK,SAAS,GAAG,EAAhB;AACA,MAAIC,cAAc,GAAGL,IAAI,CAACM,GAAL,CAASF,SAAS,GAAGD,UAArB,CAArB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYX,KAAK,CAACA,KAAN,CAAYY,aAAxB;AACA,QAAMC,eAAe,GAAG;AACtBC,IAAAA,EAAE,EAAEd,KAAK,CAACA,KAAN,CAAYY,aADM;AAEtBG,IAAAA,EAAE,EAAE;AAFkB,GAAxB;AAKA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAEjB,WAAW,CAACkB,KAA5B;AAAA,8BACE;AACE,QAAA,EAAE,EAAEH,eAAe,CAACC,EADtB;AAEE,QAAA,EAAE,EAAED,eAAe,CAACE,EAFtB;AAGE,QAAA,CAAC,EAAC,KAHJ;AAIE,QAAA,MAAM,EAAC,OAJT;AAKE,QAAA,WAAW,EAAC,GALd;AAME,QAAA,IAAI,EAAC;AANP;AAAA;AAAA;AAAA;AAAA,cADF,EASGd,cAAc,CAACgB,GAAf,CAAmB,CAACC,IAAD,EAAOC,GAAP,kBAClB;AAAA,gCACE;AACE,UAAA,EAAE,EAAED,IAAI,CAACE,EADX;AAEE,UAAA,EAAE,EAAEF,IAAI,CAACG,EAFX;AAGE,UAAA,CAAC,EAAC,KAHJ;AAIE,UAAA,MAAM,EAAC,OAJT;AAKE,UAAA,WAAW,EAAC,GALd;AAME,UAAA,IAAI,EAAC;AANP;AAAA;AAAA;AAAA;AAAA,gBADF,eASE;AACE,UAAA,EAAE,EAAEH,IAAI,CAACJ,EADX;AAEE,UAAA,EAAE,EAAEI,IAAI,CAACH,EAFX;AAGE,UAAA,EAAE,EAAEG,IAAI,CAACE,EAHX;AAIE,UAAA,EAAE,EAAEF,IAAI,CAACG,EAJX;AAKE,UAAA,MAAM,EAAC;AALT;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA,SAAQF,GAAR;AAAA;AAAA;AAAA;AAAA,cADD,CATH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAiCD;;KA/CQpB,a;AAiDT,eAAeA,aAAf","sourcesContent":["import React from \"react\";\nimport forecastCSS from \"../styles/forecast.module.css\";\n\n\n// max degree - 25\n// min degree - 13\n// average degree = 25+13/2 = 19(no)\n// find the difference between either of degrees and the average degree(no)\n// the difference between max and min - 12degrees\n// 100/1.5~ = 83- the hegiht\n// how much is one degree (proportion)\n// 12degree == 83px\n// 1degree = 83px/12 = ~7px\nfunction ForecastGraph(props) {\n\nconst temperatureDay = [23, 23, 24, 24, 22];\n  let min = Math.min(...temperatureDay),\n    max = Math.max(...temperatureNight);\n  let difference = max - min;\n  let maxHeight = 70;\n  let degreeOfChange = Math.abs(maxHeight / difference);\n  console.log(props.props.startingPoint);\n  const temperatureData = {\n    x1: props.props.startingPoint,\n    y1: 50,\n  };\n\n  return (\n    <>\n      <svg className={forecastCSS.graph}>\n        <circle\n          cx={temperatureData.x1}\n          cy={temperatureData.y1}\n          r=\"4px\"\n          stroke=\"white\"\n          strokeWidth=\"1\"\n          fill=\"black\"\n        />\n        {temperatureDay.map((each, key) => (\n          <g key={key}>\n            <circle\n              cx={each.x2}\n              cy={each.y2}\n              r=\"4px\"\n              stroke=\"white\"\n              strokeWidth=\"1\"\n              fill=\"black\"\n            />\n            <line\n              x1={each.x1}\n              y1={each.y1}\n              x2={each.x2}\n              y2={each.y2}\n              stroke=\"white\"\n            />\n          </g>\n        ))}\n      </svg>\n    </>\n  );\n}\n\nexport default ForecastGraph;\n"]},"metadata":{},"sourceType":"module"}