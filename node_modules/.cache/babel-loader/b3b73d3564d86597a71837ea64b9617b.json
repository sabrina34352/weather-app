{"ast":null,"code":"var _jsxFileName = \"/home/sabrina/codes/weather-app/src/components/Graph/ForecastGraph.js\";\nimport React from \"react\";\nimport forecastGraphCSS from \"./forecastGraph.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ForecastGraph(_ref) {\n  let {\n    data,\n    daysData,\n    style\n  } = _ref;\n  // finding the maximum and minimum values in the array\n  console.log(daysData);\n  let max = Math.max(...temperature),\n      min = Math.min(...temperature); // finding the difference to be able to calculate by how much the height of the line should be curved\n\n  let difference = max - min; // the max height to not go out of boundaries\n\n  let maxHeight = data.heightOfContainers;\n  let degreeOfChange = maxHeight / difference; // degree of change of Y axis\n  // the initial values of the graph\n\n  const temperatureData = {\n    x1: 0,\n    y1: 0,\n    x2: -data.startingPoint,\n    y2: 50\n  };\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    className: forecastGraphCSS.graph,\n    id: style,\n    children: temperature.map((each, key) => {\n      temperatureData.x1 = temperatureData.x2;\n      temperatureData.y1 = temperatureData.y2;\n      temperatureData.x2 += data.widthOfContainers;\n\n      if (temperature[key - 1] > each) {\n        temperatureData.y2 += degreeOfChange * Math.abs(temperature[key - 1] - each);\n      } else if (temperature[key - 1] < each) {\n        temperatureData.y2 -= degreeOfChange * Math.abs(temperature[key - 1] - each);\n      } else {\n        temperatureData.y2 += 0;\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: temperatureData.x2,\n          cy: temperatureData.y2,\n          r: \"4px\",\n          stroke: \"white\",\n          strokeWidth: \"1\",\n          fill: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), style === forecastGraphCSS.dayTime && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"text\", {\n            fontSize: \"16\",\n            fill: \"white\",\n            textAnchor: \"middle\",\n            alignmentBaseline: \"baseline\",\n            x: temperatureData.x2,\n            y: temperatureData.y2 - 15,\n            children: [temperature[key], \"\\xB0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: temperatureData.x1,\n            y1: temperatureData.y1,\n            x2: temperatureData.x2,\n            y2: temperatureData.y2,\n            stroke: \"white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), style === forecastGraphCSS.nightTime && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"line\", {\n            x1: temperatureData.x1,\n            y1: temperatureData.y1,\n            x2: temperatureData.x2,\n            y2: temperatureData.y2,\n            stroke: \"white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            fontSize: \"16\",\n            fill: \"white\",\n            textAnchor: \"middle\",\n            alignmentBaseline: \"baseline\",\n            x: temperatureData.x2,\n            y: temperatureData.y2 + 20,\n            children: [temperature[key], \"\\xB0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ForecastGraph;\nexport default ForecastGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForecastGraph\");","map":{"version":3,"sources":["/home/sabrina/codes/weather-app/src/components/Graph/ForecastGraph.js"],"names":["React","forecastGraphCSS","ForecastGraph","data","daysData","style","console","log","max","Math","temperature","min","difference","maxHeight","heightOfContainers","degreeOfChange","temperatureData","x1","y1","x2","startingPoint","y2","graph","map","each","key","widthOfContainers","abs","dayTime","nightTime"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport forecastGraphCSS from \"./forecastGraph.module.css\";\n\nfunction ForecastGraph({ data, daysData, style }) {\n  // finding the maximum and minimum values in the array\n  console.log(daysData);\n\n  let max = Math.max(...temperature),\n    min = Math.min(...temperature);\n  // finding the difference to be able to calculate by how much the height of the line should be curved\n  let difference = max - min;\n  // the max height to not go out of boundaries\n  let maxHeight = data.heightOfContainers;\n  let degreeOfChange = maxHeight / difference; // degree of change of Y axis\n\n  // the initial values of the graph\n  const temperatureData = {\n    x1: 0,\n    y1: 0,\n    x2: -data.startingPoint,\n    y2: 50,\n  };\n\n  return (\n    <svg className={forecastGraphCSS.graph} id={style}>\n      {temperature.map((each, key) => {\n        temperatureData.x1 = temperatureData.x2;\n        temperatureData.y1 = temperatureData.y2;\n        temperatureData.x2 += data.widthOfContainers;\n\n        if (temperature[key - 1] > each) {\n          temperatureData.y2 +=\n            degreeOfChange * Math.abs(temperature[key - 1] - each);\n        } else if (temperature[key - 1] < each) {\n          temperatureData.y2 -=\n            degreeOfChange * Math.abs(temperature[key - 1] - each);\n        } else {\n          temperatureData.y2 += 0;\n        }\n\n        return (\n          <g key={key}>\n            <circle\n              cx={temperatureData.x2}\n              cy={temperatureData.y2}\n              r=\"4px\"\n              stroke=\"white\"\n              strokeWidth=\"1\"\n              fill=\"black\"\n            />\n\n            {/* display the data according to dayTime standards */}\n            {style === forecastGraphCSS.dayTime && (\n              <>\n                <text\n                  fontSize=\"16\"\n                  fill=\"white\"\n                  textAnchor=\"middle\"\n                  alignmentBaseline=\"baseline\"\n                  x={temperatureData.x2}\n                  y={temperatureData.y2 - 15}\n                >\n                  {temperature[key]}Â°\n                </text>\n                <line\n                  x1={temperatureData.x1}\n                  y1={temperatureData.y1}\n                  x2={temperatureData.x2}\n                  y2={temperatureData.y2}\n                  stroke=\"white\"\n                />\n              </>\n            )}\n            {/* display the data according to nightTime standards */}\n            {style === forecastGraphCSS.nightTime && (\n              <>\n                <line\n                  x1={temperatureData.x1}\n                  y1={temperatureData.y1}\n                  x2={temperatureData.x2}\n                  y2={temperatureData.y2}\n                  stroke=\"white\"\n                />\n                <text\n                  fontSize=\"16\"\n                  fill=\"white\"\n                  textAnchor=\"middle\"\n                  alignmentBaseline=\"baseline\"\n                  x={temperatureData.x2}\n                  y={temperatureData.y2 + 20}\n                >\n                  {temperature[key]}Â°\n                </text>\n              </>\n            )}\n          </g>\n        );\n      })}\n    </svg>\n  );\n}\n\nexport default ForecastGraph;\n"]},"metadata":{},"sourceType":"module"}