{"ast":null,"code":"var _jsxFileName = \"/home/sabrina/codes/weather-app/src/components/ForecastGraph.js\";\nimport React from \"react\";\nimport forecastCSS from \"../styles/forecast.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ForecastGraph(_ref) {\n  let {\n    dataExists\n  } = _ref;\n  // finding the maximum and minimum values in the array\n  let max = Math.max(...dataExists.temperatureDay),\n      min = Math.min(...dataExists.temperatureDay); // finding the difference to be able to calculate by how much the height of the line should be curved\n\n  let difference = max - min; // the max height to not go out of boundaries\n\n  let maxHeight = data.heightOfContainers;\n  let degreeOfChange = maxHeight / difference; // degree of change of Y axis\n  // the initial values of the graph\n\n  const temperatureData = {\n    x1: 0,\n    y1: 0,\n    x2: -data.startingPoint,\n    y2: 50\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      className: forecastCSS.graph,\n      children: data.temperatureDay.map((each, key) => {\n        temperatureData.x1 = temperatureData.x2;\n        temperatureData.y1 = temperatureData.y2;\n        temperatureData.x2 += data.widthOfContainers;\n\n        if (data.temperatureDay[key - 1] > each) {\n          temperatureData.y2 += degreeOfChange * Math.abs(data.temperatureDay[key - 1] - each);\n        } else if (data.temperatureDay[key - 1] < each) {\n          temperatureData.y2 -= degreeOfChange * Math.abs(data.temperatureDay[key - 1] - each);\n        } else {\n          temperatureData.y2 += 0;\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: temperatureData.x2,\n            cy: temperatureData.y2,\n            r: \"4px\",\n            stroke: \"white\",\n            strokeWidth: \"1\",\n            fill: \"black\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: temperatureData.x1,\n            y1: temperatureData.y1,\n            x2: temperatureData.x2,\n            y2: temperatureData.y2,\n            stroke: \"white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_c = ForecastGraph;\nexport default ForecastGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForecastGraph\");","map":{"version":3,"sources":["/home/sabrina/codes/weather-app/src/components/ForecastGraph.js"],"names":["React","forecastCSS","ForecastGraph","dataExists","max","Math","temperatureDay","min","difference","maxHeight","data","heightOfContainers","degreeOfChange","temperatureData","x1","y1","x2","startingPoint","y2","graph","map","each","key","widthOfContainers","abs"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;;;;AAIA,SAASC,aAAT,OAAqC;AAAA,MAAd;AAACC,IAAAA;AAAD,GAAc;AACnC;AACA,MAAIC,GAAG,GAAGC,IAAI,CAACD,GAAL,CAAS,GAAGD,UAAU,CAACG,cAAvB,CAAV;AAAA,MACEC,GAAG,GAAGF,IAAI,CAACE,GAAL,CAAS,GAAGJ,UAAU,CAACG,cAAvB,CADR,CAFmC,CAInC;;AACE,MAAIE,UAAU,GAAGJ,GAAG,GAAGG,GAAvB,CALiC,CAMjC;;AACF,MAAIE,SAAS,GAAGC,IAAI,CAACC,kBAArB;AACA,MAAIC,cAAc,GAAGH,SAAS,GAAGD,UAAjC,CARmC,CAQU;AAE7C;;AACA,QAAMK,eAAe,GAAG;AACtBC,IAAAA,EAAE,EAAE,CADkB;AAEtBC,IAAAA,EAAE,EAAE,CAFkB;AAGtBC,IAAAA,EAAE,EAAE,CAACN,IAAI,CAACO,aAHY;AAItBC,IAAAA,EAAE,EAAE;AAJkB,GAAxB;AAOA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAEjB,WAAW,CAACkB,KAA5B;AAAA,gBACGT,IAAI,CAACJ,cAAL,CAAoBc,GAApB,CAAwB,CAACC,IAAD,EAAOC,GAAP,KAAe;AACtCT,QAAAA,eAAe,CAACC,EAAhB,GAAqBD,eAAe,CAACG,EAArC;AACAH,QAAAA,eAAe,CAACE,EAAhB,GAAqBF,eAAe,CAACK,EAArC;AACAL,QAAAA,eAAe,CAACG,EAAhB,IAAsBN,IAAI,CAACa,iBAA3B;;AAGA,YAAIb,IAAI,CAACJ,cAAL,CAAoBgB,GAAG,GAAG,CAA1B,IAA+BD,IAAnC,EAAyC;AACvCR,UAAAA,eAAe,CAACK,EAAhB,IACEN,cAAc,GAAGP,IAAI,CAACmB,GAAL,CAASd,IAAI,CAACJ,cAAL,CAAoBgB,GAAG,GAAG,CAA1B,IAA+BD,IAAxC,CADnB;AAED,SAHD,MAGO,IAAIX,IAAI,CAACJ,cAAL,CAAoBgB,GAAG,GAAG,CAA1B,IAA+BD,IAAnC,EAAyC;AAC9CR,UAAAA,eAAe,CAACK,EAAhB,IACEN,cAAc,GAAGP,IAAI,CAACmB,GAAL,CAASd,IAAI,CAACJ,cAAL,CAAoBgB,GAAG,GAAG,CAA1B,IAA+BD,IAAxC,CADnB;AAED,SAHM,MAGA;AACLR,UAAAA,eAAe,CAACK,EAAhB,IAAsB,CAAtB;AACD;;AAED,4BACE;AAAA,kCACE;AACE,YAAA,EAAE,EAAEL,eAAe,CAACG,EADtB;AAEE,YAAA,EAAE,EAAEH,eAAe,CAACK,EAFtB;AAGE,YAAA,CAAC,EAAC,KAHJ;AAIE,YAAA,MAAM,EAAC,OAJT;AAKE,YAAA,WAAW,EAAC,GALd;AAME,YAAA,IAAI,EAAC;AANP;AAAA;AAAA;AAAA;AAAA,kBADF,eASE;AACE,YAAA,EAAE,EAAEL,eAAe,CAACC,EADtB;AAEE,YAAA,EAAE,EAAED,eAAe,CAACE,EAFtB;AAGE,YAAA,EAAE,EAAEF,eAAe,CAACG,EAHtB;AAIE,YAAA,EAAE,EAAEH,eAAe,CAACK,EAJtB;AAKE,YAAA,MAAM,EAAC;AALT;AAAA;AAAA;AAAA;AAAA,kBATF;AAAA,WAAQI,GAAR;AAAA;AAAA;AAAA;AAAA,gBADF;AAmBD,OAnCA;AADH;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA0CD;;KA5DQpB,a;AA8DT,eAAeA,aAAf","sourcesContent":["import React from \"react\";\nimport forecastCSS from \"../styles/forecast.module.css\";\n\n\n\nfunction ForecastGraph({dataExists}) {\n  // finding the maximum and minimum values in the array\n  let max = Math.max(...dataExists.temperatureDay),\n    min = Math.min(...dataExists.temperatureDay);\n  // finding the difference to be able to calculate by how much the height of the line should be curved\n    let difference = max - min;\n    // the max height to not go out of boundaries\n  let maxHeight = data.heightOfContainers;\n  let degreeOfChange = maxHeight / difference; // degree of change of Y axis\n\n  // the initial values of the graph\n  const temperatureData = {\n    x1: 0,\n    y1: 0,\n    x2: -data.startingPoint,\n    y2: 50,\n  };\n\n  return (\n    <>\n      <svg className={forecastCSS.graph}>\n        {data.temperatureDay.map((each, key) => {\n          temperatureData.x1 = temperatureData.x2;\n          temperatureData.y1 = temperatureData.y2;\n          temperatureData.x2 += data.widthOfContainers;\n\n\n          if (data.temperatureDay[key - 1] > each) {\n            temperatureData.y2 +=\n              degreeOfChange * Math.abs(data.temperatureDay[key - 1] - each);\n          } else if (data.temperatureDay[key - 1] < each) {\n            temperatureData.y2 -=\n              degreeOfChange * Math.abs(data.temperatureDay[key - 1] - each);\n          } else {\n            temperatureData.y2 += 0;\n          }\n\n          return (\n            <g key={key}>\n              <circle\n                cx={temperatureData.x2}\n                cy={temperatureData.y2}\n                r=\"4px\"\n                stroke=\"white\"\n                strokeWidth=\"1\"\n                fill=\"black\"\n              />\n              <line\n                x1={temperatureData.x1}\n                y1={temperatureData.y1}\n                x2={temperatureData.x2}\n                y2={temperatureData.y2}\n                stroke=\"white\"\n              />\n            </g>\n          );\n        })}\n      </svg>\n    </>\n  );\n}\n\nexport default ForecastGraph;\n"]},"metadata":{},"sourceType":"module"}